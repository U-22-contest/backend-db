// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/postgresql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  email      String      @unique
  password   String
  novels     Novel[]     @relation("UserNovels")
  comments   Comment[]   @relation("UserComments")
  likeNovels LikeNovel[] @relation("UserLikeNovels")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // 自分をフォローしているユーザー（フォロワー）
  followers Follow[] @relation("FolloweeRelation")
  // 自分がフォローしているユーザー
  followees Follow[] @relation("FollowerRelation")
}

model Follow {
  id         String   @id @default(cuid())
  // フォローする人（フォロワー）のID
  followerId String
  follower   User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  // フォローされる人のID
  followeeId String
  followee   User     @relation("FolloweeRelation", fields: [followeeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId])
}

model Novel {
  id         String     @id @default(uuid())
  sharedId   String     @unique
  title      String
  authorId   String
  coverImagePath String?
  author     User       @relation("UserNovels", fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[] @relation("NovelCategories")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comments   Comment[]  @relation("NovelComments")
  likes      LikeNovel[] @relation("NovelLikes")
}

model Category {
  categoryId   String  @id @default(uuid())
  categoryName String  @unique
  novel        Novel[] @relation("NovelCategories")
}

model Comment {
  id         String   @id @default(uuid())
  sharedId   String   @unique
  userId     String
  user       User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  novelId    String
  novel      Novel    @relation("NovelComments", fields: [novelId], references: [id], onDelete: Cascade)
  startIndex Int
  endIndex   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LikeNovel {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserLikeNovels", fields: [userId], references: [id], onDelete: Cascade)
  novelId   String
  novel     Novel    @relation("NovelLikes", fields: [novelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, novelId])
}
